https://medium.com/bb-tutorials-and-thoughts/250-practice-questions-for-terraform-associate-certification-7a3ccebe6a1a

Install Terraform
-----------------

1. Install chocolatey on windows of your laptop
https://chocolatey.org/install

2. Install terraform with below command:
choco install terraform

3. Follow below to install terraform in different OS
https://www.terraform.io/downloads

-----------------
terraform provider version constraint. version arugment is used to specify provider constraint.

terraform {
  required_providers {
    artifactory = {
      source = "jfrog/artifactory"
      version = "6.14.0"
    }
  }
}

provider "artifactory" {
  # Configuration options
}
-----------------
terraform version constraint. required_version is used to specify terraform version constraint.
terraform {
  required_providers {
    artifactory = {
      source = "jfrog/artifactory"
      version = "6.14.0"
    }
  required_version = "~>= 1.3.1"  
  }
}

provider "artifactory" {
  # Configuration options
}

-----------------------
How to upgrade/degrade terraform provider?
Either delete .terraform.lock.hcl file or terraform init -upgrade
-----------------------

Terraform workflow:
1. create/init
2. plan
3. apply

-----------------------

Create ec2.tf file:

provider "aws" {
  region     = "us-east-1"
  access_key = "XXXXX"
  secret_key = "XXXXX"
}

resource "aws_instance" "webvm" {
   ami = "ami-026b57f3c383c2eec"
   instance_type = "t2.micro"
}


terraform init
This will initializes a working directory containing configuration files and install pluggins for required providers.

terraform plan
It will let you preview the actions terraform would take to modify your infrastruture, or save plan which you can apply later.

terraform apply
This will execute the actions proposed in a terraform plan to create, update or destroy infrastructure.
----------

1. Create and execute plan for creation of resources:

terraform plan -out myplan.out
terraform apply myplan.out

This command will show you the content of plan:

terraform show -json myplan.out | jq

2. Create and execute plan for deletion of resources:

terraform plan -destroy -out destroy.out
terraform apply destroy.out


terraform destroy:
It will delete all resources mentioned in your configuration.

-----------------------
Destroy target resource: 
ResourceIdentifier: <resourcetype.localresourcename>
terraform destroy -target aws_iam_user.myuser -auto-approve

------
Few Examples:--
------
1. Create a rds db and take snapshot of that instance instance class db.t2.micro.
2. Create EBS volume and take snapshot of the EBS volume
3. Create EC2 instance and EBS volume and attach EBS volume to the instance.
4. Create Classic Load Balancer and register the EC2 instance with ELB.
5. Create 5 IAM users and 1 groups. Add all users to group.
6. Launch EC2 instance and install nginx using user data. Take AMI of that instance and then launch another machine using that AMI.
7. Create Lambda Function to print "hello world"
8. Create S3 bucket and attach simple policy to allow public read:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicRead",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion"
            ],
            "Resource": [
                "arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"
            ]
        }
    ]
}
9. Create Security Group and open ingress and egress to 0.0.0.0/0.
10. Create VPC with 2 subnets.



1) We covered implicit dependency in terraform. by specifying resource identifier.attribute.

2) Terraform output 
output "volume_info" {
   value = "resource_identifier"
}

3) terraform sensitive variables. In case you don't want to print the exact value on console output. You can use sensitive = true as below:

output "volume_info" {
   value = "resource_identifier"
   sensitive = true
}

4) Reading the terraform documentation, resources, arguments refrences, attributes refrences

5. Terraform State File:
How terraform track what is created and what is destroyed? It maintains a database file locally where you are running terraform command from. State file stores state of infrastructure that is being used from TF files. Never touch/edit/update state file. Always consider backup of state file.
The state allows terraform to map real world resources to your existing configuration. 
AWS Demo:
Create EC2 Machine and a S3 bucket in AWS using terraform
Notice the tf state file
Remove the tfstate file
Run terraform plan and apply and try creating both EC2 machine and bucket.
Delete both EC2 machine and S3 bucket.
Create it again.


6. Terraform Data Source:-

1. Create provider.tf file
2. data.tf
data "aws_ami" "amznlinux" {
    most_recent = false
    owners = ["AWS-ACCT-Number"]
    filter {
        name = "name"
        values = ["*securedimage"]
    }
    filter {
        name = "root-device-type"
        values = ["ebs"]
    }
    filter {
        name = "virtualization-type"
        values = ["hvm"]
    }
    filter {
        name = "architecture"
        values = ["x86_64"]
    }
}
3. main.tf
resource "aws_instance" "webvm" {
   ami = data.aws_ami.amznlinux.id
   instance_type = "t2.micro"
   key_name = aws_key_pair.deployer.key_name
   user_data = file ("script.sh")
   vpc_security_group_ids = [aws_security_group.allow_ssh.id, aws_security_group.allow_web.id]
   tags = {
    "Name" = "Webserver"
   }
}
4. keypair.tf
resource "aws_key_pair" "deployer" {
  key_name   = "deployer-key"
  public_key = "ssh-rsa WF9***"
}

5. output.tf
output "myimage" {
    value = data.aws_ami.amznlinux.id
}
6.script.sh
#! /bin/bash
sudo yum update -y
sudo yum install -y httpd
sudo systemctl enable httpd
sudo service httpd start
echo "<h1>We are learning Terraform</h1>" | sudo tee /var/www/html/index.html

7. securitygroup.tf
resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound traffic"
  ingress {
    description      = "Allow SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    description      = "Allow all outgoing traffic"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_ssh"
  }
}


resource "aws_security_group" "allow_web" {
  name        = "allow_apache"
  description = "Allow Apache inbound traffic"
  ingress {
    description      = "Allow web apache"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "Allow SSL web apache"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    description      = "Allow all outgoing traffic"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_apache"
  }
}



